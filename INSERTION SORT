#include <stdio.h>
#include <limits.h>

#define N 4  

int dist[N][N] = {
    {0, 10, 15, 20},
    {10, 0, 35, 25},
    {15, 35, 0, 30},
    {20, 25, 30, 0}
};  

int visited[N];  
int min_path[N]; 
int min_cost = INT_MAX;  

int calculateCost(int path[], int n) {
    int cost = 0;
    int i;
    for ( i = 0; i < n - 1; i++) {
        cost += dist[path[i]][path[i + 1]];
    }
    cost += dist[path[n - 1]][path[0]]; 
    return cost;
}

void tsp(int path[], int level) {
	int i;
    if (level == N) {
        int cost = calculateCost(path, N);
        if (cost < min_cost) {
            min_cost = cost;
            for ( i = 0; i < N; i++) {
                min_path[i] = path[i];
            }
        }
        return;
    }

    for ( i = 0; i < N; i++) {
        if (!visited[i]) {
            visited[i] = 1;  
            path[level] = i;#include <stdio.h>

void insertionSort(int arr[], int n) {
    int i, key, j;
    
    for (i = 1; i < n; i++) {
        key = arr[i];  // The current element to be inserted
        j = i - 1;
        
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

void printArray(int arr[], int size) {
    int i;
    for (i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int arr[] = {20, 10, 40, 30, 60, 50, 70};  
    int n = sizeof(arr) / sizeof(arr[0]);
    
    printf("Original array: \n");
    printArray(arr, n);
    
    insertionSort(arr, n);  
    
    printf("Sorted array: \n");
    printArray(arr, n);
    
    return 0;
}
            tsp(path, level + 1);  
            visited[i] = 0;  
        }
    }
}

int main() {
    int path[N];
    int i;
    for ( i = 0; i < N; i++) {
        visited[i] = 0; 
    }

    path[0] = 0;
    visited[0] = 1;

    tsp(path, 1);

    printf("Minimum Cost: %d\n", min_cost);
    printf("Optimal Path: ");
    for ( i = 0; i < N; i++) {
        printf("%d ", min_path[i]);
    }
    printf("\n");

    return 0;
}
